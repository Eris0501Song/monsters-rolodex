{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/card-list/search-box/search-box.component.jsx","App.js","serviceWorker.js","index.js"],"names":["Card","props","className","alt","src","monster","id","name","email","CardList","monsters","map","key","Searchbox","placeholder","handleChange","type","onChange","App","state","searchField","fetch","then","response","json","users","setState","this","filterMonsters","filter","toLowerCase","includes","e","target","value","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"6UAMaA,G,YAAO,SAACC,GAAD,OAChB,yBAAKC,UAAU,kBACX,yBACIC,IAAI,UACJC,IAAG,+BAA2BH,EAAMI,QAAQC,GAAzC,4BAGP,gCAAOL,EAAMI,QAAQE,KAArB,KACA,+BAAMN,EAAMI,QAAQG,MAApB,QCTKC,EAAW,SAAAR,GAAK,OACxB,yBAAKC,UAAU,aAEVD,EAAMS,SAASC,KACT,SAAAN,GAAO,OACH,kBAAC,EAAD,CAAMO,IAAKP,EAAQC,GAAID,QAASA,SCJvCQ,G,MAAY,SAAC,GAAD,IAAGC,EAAH,EAAGA,YAAaC,EAAhB,EAAgBA,aAAhB,OACrB,2BACAb,UAAY,SACZc,KAAK,SACLF,YAAeA,EACfG,SAAaF,MCqDFG,G,wDAtDb,aAAc,IAAD,8BAEX,gBAEKC,MAAQ,CAEXT,SAAU,GAEVU,YAAa,IARJ,E,gEAmBO,IAAD,OACjBC,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKC,SAAS,CAAChB,SAAUe,S,+BAMhC,IAAD,SAC2BE,KAAKR,MAA/BT,EADD,EACCA,SAAUU,EADX,EACWA,YACZQ,EAAiBlB,EAASmB,QAAO,SAAAxB,GAAO,OAC5CA,EAAQE,KAAKuB,cAAcC,SAASX,EAAYU,kBAElD,OACA,yBAAK5B,UAAU,OAEf,iDACA,kBAAC,EAAD,CACEY,YAAc,kBACdC,aAAiB,SAAAiB,GAAC,OAAI,EAAKN,SAAS,CAAEN,YAAaY,EAAEC,OAAOC,WAE9D,kBAAC,EAAD,CAAUxB,SAAUkB,S,GA1CNO,cCGEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB1B,MAAK,SAAA2B,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.7a5142d1.chunk.js","sourcesContent":["import React from 'react';\n\nimport './card.styles.css';\n\n// Card = (props): 意思是一个叫card的function, 里面的parameter叫props\n//=>: 意思是return()\nexport const Card = (props) => (\n    <div className='card-container'>\n        <img \n            alt=\"monster\" //alt: 相当于图片注释\n            src={ `https://robohash.org/${props.monster.id}?set=set2&size=300x300` } \n        />\n        {/* {}: The curly braces are a special syntax to let the JSX parser know that it needs to interpret the contents in between them as JavaScript instead of a string. */}\n        <h2> { props.monster.name } </h2>  \n        <p> { props.monster.email } </p>\n\n    </div>\n\n)","import React from 'react';\nimport './card-list.styles.css';\nimport  { Card } from '../card/card.component';\n\n// const: You can change the properties of a constant object; But you can NOT reassign a constant object\nexport const CardList = props => (\n     <div className='card-list'>\n        {// Map被称为arrey methods: 作用是让之后写的function可以在class中每一个element上被实践. 并create出一个new arrey based on our exsiting arrey\n          props.monsters.map(\n                monster => (\n                    <Card key={monster.id} monster={monster} />\n                )\n            )\n        }\n    </div>\n);","import React from 'react';\n\nimport './search-box.style.css';\n\n// functional components mainly are used to use props and get some html; they usually dont have access to the MediaStreamTrackAudioSourceNode.\n// ⚠️⚠️⚠️⚠️setState 是asynchronous(异步的), 为了让动作保持一致, 其他动作要直接写在setState的第二个props处, 而不是setState外面 \nexport const Searchbox = ({ placeholder, handleChange }) => (\n    <input \n    className = 'search'\n    type='search'\n    placeholder= { placeholder }\n    onChange = { handleChange }\n   />  \n);\n\n//单独写search-box component是为了让我们可以reuse search box, huge advantage of react","import React, { Component } from 'react'; \nimport {CardList} from './components/card-list/card-list.component';\nimport {Searchbox} from './components/card-list/search-box/search-box.component';\nimport './App.css';\n\n\n// component is a property of react.\n// class App extends Component: 作用是让react知道我们要在class上使用react中component这个property\n// inheritance: component为parent class, app为child class\nclass App extends Component{\n  constructor(){\n    // super() helps call react.component's comstructor()(super是在callcomponent内的结构)\n    super();\n    // this.state会被pass down成为component的props, 如果state被改变, rendor fucntion就会被run again\n    this.state = {\n      // 🚥string = \"Hello Eris\"\n      monsters: [],\n      //设置searchfield空string是为了存储userinput的内容,方便后续和db中的monster比对得到结果(在之后会用setstate对searchField重新赋值)\n      searchField: ''\n    };\n\n        {/*  对class内对象使用function时可写为this.functioname; \n      但要注意如果是自建function,写法会有不同,因为scope不同; 但自建function body里存在this时才用bind;\n      或者可以把自建function写为arrow function 就不用bind; arrow function会自动搜寻被定义的context */}\n        // ⚠️⚠️⚠️⚠️⚠️最好function都写为arrow function, 避免要写bind或者出现undefined\n  }\n\n  // componentDidMount(): invoked immediately after a component is mounted (inserted into the tree). Initialization that requires DOM nodes should go here. If you need to load data from a remote endpoint, this is a good place to instantiate the network request.\n  //fetch(): Request represents a HTTP request to be performed via fetch(). Typically a Request doesn't need to be constructed manually, as it's instantiated internally when fetch() is called.\n  componentDidMount(){\n    fetch('https://jsonplaceholder.typicode.com/users')\n    .then(response => response.json())   //把fetch出来的内容定义为response然后将response转换为json格式\n    .then(users => this.setState({monsters: users}));\n  }\n\n  // ⚠️⚠️⚠️⚠️⚠️大括号{}里的内容都是JavaScript expression\n  // Anonymous functions: () =>  An anonymous function is a function that was declared without any named identifier to refer to it. As such, an anonymous function is usually not accessible after its initial creation.\n  //filter(): 通过对arrey中所有的对象执行一次filter()中设置的function, 筛选出符合条件的对象形成一个新arrey而不是modify原来的array\n  render() {\n    const { monsters, searchField } = this.state;\n    const filterMonsters = monsters.filter(monster => \n      monster.name.toLowerCase().includes(searchField.toLowerCase())\n      );\n    return(\n    <div className='App'>\n      {/* ⚠️⚠️⚠️⚠️onChange作用是input内容一发生改变就执行onChange内的内容; e代表event; e.target.value代表被input的内容, 用于提取存储*/}\n    <h1> Monsters Rolodex</h1>\n    <Searchbox\n      placeholder = 'search monsters'\n      handleChange = { e => this.setState({ searchField: e.target.value })} \n    />\n    <CardList monsters={filterMonsters} /> \n        {/* 🚥 <p>f\n          {this.state.string}\n              </p>\n        🍦🍦🍦🍦🍦这里使用setState是因为jsx是one-way data flow, 不能写this.state.string来试图改变之前的state, \n        所以只能用setstate 来定义一个新值,然后让render() rerun. very important!!!\n        <button onClick={ () => this.setState({ string: 'Hello Kelun' })}>Change Text</button> */}\n    </div>\n    )\n  };\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}